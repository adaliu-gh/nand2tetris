// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    DMux(in=true,sel=instruction[15],a=ainstruct,b=cinstruct); //A instruction or C instruction?
   
    
	Not(in=cinstruct,out=resetalu);

    Mux16(a=false,b=instruction,sel=cinstruct,out[11]=zx,out[10]=nx,out[9]=zy,out[8]=ny,out[7]=f,out[6]=no,out[12]=dorm,out[3]=wm,out[4]=wd,out[5]=wa,out[0..2]=jump);    //decode the c instruction

    ALU(x=Dout,y=y,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,out=aluout,zr=zr,ng=ng);    //ALU

    Mux16(a=Aout,b=inM,sel=dorm,out=y);  //y=A? or y=M?
    
    And(a=wm,b=true,out=writeM);	//write memory?

	And16(a=true,b=aluout,out=outM);	//memory value output

	
	Not(in=wa,out=addr);	//judge if the A register holds a memory address
	
	
	
	DRegister(in=aluout,load=wd,out=Dout);	//D register
	
	Register(in=aluout,load=wa,out=alutoa);	//alu to A?
	
	Mux16(a=instruction,b=aluout,sel=wa,out=Ainput);	//input to A register
	Or(a=wa,b=ainstruct,out=inputa);
	ARegister(in=Ainput,load=inputa,out=Aout);//A register	
	
	
	And16(a=Aout,b=true,out[0..14]=addressM);	//memroy address
	
	Or(a=zr,b=ng,out=sz0);	//<=0?
	
	Not(in=sz0,out=bigger0);	//>0?
    
	Or(a=bigger0,b=zr,out=bz0);	//>=0?
	

	Not(in=zr,out=not0); //!=0?
	
	Mux8Way16(a=false,b[0..14]=false,b[15]=bigger0,c[0..14]=false,c[15]=zr,d[0..14]=false,d[15]=bz0,e[0..14]=false,e[15]=ng,f[0..14]=false,f[15]=not0,g[0..14]=false,g[15]=sz0,h=true,sel=jump,out[15]=jumpcondition);	//the condition for jump
	
	And(a=cinstruct,b=jumpcondition,out=loadpc);
	Not(in=loadpc,out=inc);	//	pc inc or not?
	
	PC(in=Aout,load=loadpc,reset=reset,inc=inc,out[0..14]=pc);	
	

}

