// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */
class Memory {
    static int freelist;

    /** Initializes memory parameters. */
    function void init() {

        let freelist=2408;
        let freelist[0]=14334;
        let freelist[1]=null;
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        var int memory;
        let memory=0;

        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        var int memory ;
        let memory=0;
        let memory[address]=value;
        return;
    }

    /** finds and allocates from the heap a memory block of the
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        var int block;

        var int segment;


        let segment=freelist;

        while (~(segment[0]>size)){
            let segment=segment[1];
            if (segment=0)   {
                return -1;
            }
        }


        let block=segment+segment[0]-size;
        let segment[0]=segment[0]-(size+1);
        if (segment[0]=0)   {
            let segment[0]=segment[1];
        }
        let block[-1]=size+1;
        return block;

    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        var int segment;
        let segment=freelist;
        while (~(segment[1]=null))  {
            let segment=segment[1];
        }

        let segment[1]=object-1;
        let object[1]=null;
        return;
    }
}
