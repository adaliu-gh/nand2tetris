// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */
class Memory {
    static Array freelist;

    /** Initializes memory parameters. */
    function void init() {

        let freelist=0;
        let freelist[2048]=14334;
        let freelist[2049]=2050;
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        
        return freelist[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        
        let freelist[address]=value;
        return;
    }

    /** finds and allocates from the heap a memory block of the
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        var int block;

        var int segment;
        var int pre;

        let segment=2048;

        while (~(segment[0]>size)){
            let pre=segment;
            let segment=segment[1];
            if (segment=0)   {
                return "failure";
            }
        }


        let block=segment+(segment[0]-size);
        let segment[0]=segment[0]-(size+1);
        if (segment[0]<3)   {
            let block =segment;
            let pre[1]=segment[1];
        }
        let block[-1]=size+1;
        return block;

    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        var int segment;
        let segment=2048;
        while (~(segment[1]=0))  {
            let segment=segment[1];
        }

        let segment=object-1;
        let segment[0]=object[-1];
        return;
    }
}
