// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {


    /** Initializes the library. */
    function void init() {
        return;

    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x<0){
            return -x;
        }
        else {
            return x;
        }

    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var boolean notneg;
        var int x2;
        var int y2;
        var int i;
        var int flag;
        var int sum;

        let notneg=((x<0)=(y<0));
        let x2=Math.abs(x);
        let y2=Math.abs(y);
        let i=0;
        let flag=1;
        let sum=0;
        
        while (i<16) {
            if ((y2&flag)=flag) {
                let sum=sum+x2;
            }
            let x2=x2+x2;
            let flag=flag+flag;
            let i=i+1;
        }

        if (notneg){
            return sum;
        }
        else {
            return -sum;
        }

    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var boolean notneg;
        var int x2;
        var int y2;
        var int r;

        let notneg=((x<0)=(y<0));
        let x2=Math.abs(x);
        let y2=Math.abs(y);
        let r=0;

        while (~(x2<y2)) {
            let x2=x2-y2;
            let r=r+1;
        }

        if (notneg){
            return r;
        }
        else {
            return -r;
        }
 
    }


//   function int base2(int x) {
//      //var int r;
///      var int i;
///      var boolean neg;

///      let i=0;
///      let r=1;
///      if (x<0) {
///          let neg=true;
///      }

///      while (i<x) {
///          let r=r+r;
///          let i=i+1;
///      }

///      if (neg) {
///          return (1/r);
///      }
///      else {
///          return r;
///      }

//      var int flag;
//       var int result;
//       let flag = x;
//       let result = 1;
//       if(x=0){
//           return 1;
//       }
//       while ( flag>0 ){
//           let result = Math.multiply(result,2);
//           let flag=flag-1;
//       }
//       return result; 
//
//   }

//   function int log2(int x) {
//       var int y;
//       var boolean neg;
//       let y=0;
//       if (x<1) {  
//           let neg=true;
//           let x=1/x;
//       }
//       if ((x>16384)&((x<32767)|(x=32767))){
//           return 15;
//       }

//       while ((Math.base2(y))<x) {
//           let y=y+1;
//       }
//       if (neg) {
//           let y=-y;
//       }
//       return y;

//   }
//   /** Returns the integer part of the square root of x. */
//   function int sqrt(int x) {
//       var int y;
//       var int n;
//       var int j;
//       var int tmp;

//       let y=0;
//       let n=Math.log2(x);
//       let j=n/2-1;
//       while (j>-1) {
//           let tmp=Math.base2(j);
//           if (~(((y+tmp)*(y+tmp))>x)) {
//               let y=y+tmp;
//           }

//           let j=j-1;
//       }
//       return y;
//   }




    /** Returns to the exponent number n where x <= 2^n. */
    function int logTwo(int x){
        var int powerTwo,flag;
        if ((x>16384)&((x<32767)|(x=32767))){
            return 15;
        }
        let powerTwo = 1;
        let flag = 0;
        while (powerTwo<x){
            let powerTwo = powerTwo+powerTwo;
            let flag = flag + 1;
        }
        return flag;
    }
    
    /** Returns to x^y. */
    function int power(int x, int y){
        var int flag;
        var int result;
        let flag = y;
        let result = 1;
        if(y=0){
            return 1;
        }
        while ( flag>0 ){
            let result = Math.multiply(result,x);
            let flag=flag-1;
        }
        return result; 
    }   
    
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,flag,powerJ;
        var int n,halfN;
        let y=0;
        let n = Math.logTwo(x);
        let halfN = Math.divide(n,2);
        let j=halfN;
        if (x<0){
            return Sys.error(3);
        }
        while (j>-1){
            let powerJ = Math.power(2,j);
            let flag = y+powerJ;
            let flag = Math.multiply(flag,flag);
            if (((flag < x) | (flag = x)) & (flag > 0)){
                let y = y + powerJ;
            }
            let j=j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a>b) {
            return a;
        }
        else {
            return b;
        }
 
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a<b) {
            return a;
        }
        else {
            return b;
        }
 
    }
}
